from flask import Flask, jsonify, request, render_template
from werkzeug.utils import secure_filename
import os
import time
import threading
import cv2
import mediapipe as mp
from tensorflow.keras.models import Sequential, model_from_json
import numpy as np
import base64
import pandas as pd

app = Flask(__name__)

ALLOWED_EXTENSIONS = {'flv', 'mov', 'avi', 'mp4'}
app.config['UPLOAD_FOLDER'] = 'static\\uploaded'
cls = ['falling', 'pain', 'sitting', 'sleeping', 'standing', 'walking']

final_output = []

df = pd.DataFrame(columns=['frame_id', 'activity', 'percentage'])


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route("/upload-video", methods=["POST"])
def upload_video():
    global df
    df = pd.DataFrame(columns=['frame_id', 'activity', 'percentage'])
    if 'file' not in request.files:
        resp = jsonify({'message': 'No file part in the request'})
        resp.status_code = 400
        return resp
    file = request.files['file']
    if file.filename == '':
        resp = jsonify({'message': 'No file selected for uploading'})
        resp.status_code = 400
        return resp
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        thread = threading.Thread(target=process_video, kwargs={
            'file_path': file_path})
        thread.start()

        resp = jsonify({'message': 'File successfully uploaded'})
        resp.status_code = 201
        return resp
    else:
        resp = jsonify({'message': 'Allowed file types are flv, mov, avi, mp4'})
        resp.status_code = 400
        return resp


@app.route("/get-current-activity", methods=["GET"])
def get_current_activity():
    global final_output
    if len(final_output) == 0:
        return jsonify([])
    results = []
    for x in range(60):
        if len(final_output) == 0:
            break
        results.append(final_output.pop(0))
    return jsonify(results)


@app.route("/get-report", methods=["GET"])
def get_report():
    # df.to_csv('res.csv', header=True, index=False)
    x = df.groupby(['frame_id'])['percentage'].transform(max) == df['percentage']
    x = df[x].groupby('activity').count().reset_index()
    x['time'] = round(x['frame_id'] / 28)
    x_di = x[['activity', 'time']].to_dict('records')
    di_res = {x:0 for x in cls}
    for rec in x_di:
        di_res[rec['activity']] = rec['time']
    return {"report": di_res}

def to_pixel_coords(img,relative_coords):
    SCREEN_DIMENSIONS = (img.shape[1],img.shape[0])
    return tuple(round(coord * dimension) for coord, dimension in zip(relative_coords, SCREEN_DIMENSIONS))

def process_video(**kwargs):
    file_name = kwargs.get('file_path', {})
    global final_output, df
    cap = cv2.VideoCapture(file_name)
    buffer = []
    temp = []
    framecount = 0
    with mp_pose.Pose(min_detection_confidence=0.1, min_tracking_confidence=0.5) as pose:
        prev_frame_time = 0
        while (True):
            new_frame_time = time.time()
            framecount += 1
            ret, frame = cap.read()
            keypoints = []
            if (not ret):
                break
            image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            image.flags.writeable = False
            results = pose.process(image)

            fps = 1 / (new_frame_time - prev_frame_time)
            prev_frame_time = new_frame_time
            # converting the fps into integer
            fps = int(fps)

            try:
                landmarks = results.pose_landmarks.landmark
                for points in range(len(landmarks)):
                    keypoints.append(to_pixel_coords(image,[landmarks[points].x, landmarks[points].y,landmarks[points].z]))
                buffer.append(keypoints)
                if (len(np.array(buffer)) >= 30):  # and framecount%3==0):
                    mean_val = np.mean(loaded_model.predict(np.array(buffer)), axis=0)
                    buffer.pop(0)
                    # x = landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].x
                    # y_ = landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].y
                    # val = ((x + y_) + (x * y_)) / 2
                    # temp.append(val)
                    current_activity = {}
                    for val, actions in enumerate(mean_val):
                        current_activity[cls[val]] = round(100 * actions, 2)
                        df = pd.concat([df, pd.DataFrame({'frame_id': [framecount], 'activity': [cls[val]], 'percentage': [round(100 * actions, 2)]})])
                    max_key = max(current_activity, key=current_activity.get)
                    image = cv2.putText(image, max_key+ ":" + str(current_activity[max_key]), (50, val * 70 + 100),
                                        cv2.FONT_HERSHEY_SIMPLEX,
                                        1, (255, 0, 0), 2, cv2.LINE_AA)
                    # current_activity = {k: v for k, v in sorted(current_activity.items(), key=lambda item: item[1], reverse=True)}
                    image.flags.writeable = True
                    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
                    mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                              mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2),
                                              mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=2)
                                              )

                    retval, bf = cv2.imencode('.jpg', image)
                    data_base64 = base64.b64encode(bf)  # encode to base64 (bytes)
                    data_base64 = data_base64.decode()  # convert bytes to string
                    current_data = {
                        "current_frame": 'data:image/jpeg;base64,' + data_base64,
                        "current_activity": current_activity
                    }
                    final_output.append(current_data)
            except:
                continue
        cap.release()
    print('Finished Process')

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    mp_drawing = mp.solutions.drawing_utils
    mp_pose = mp.solutions.pose

    json_file = open('model/fighting.json', 'r')
    loaded_model_json = json_file.read()
    json_file.close()
    loaded_model = model_from_json(loaded_model_json)
    # load weights into new model
    loaded_model.load_weights("model/fighting.h5")
    # app.run(debug=True, host="0.0.0.0", port=8888)
    app.run(debug=True, port=8887)
